{"ast":null,"code":"import { computed, ref, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport { useVuelidate } from '@vuelidate/core';\nimport { required, helpers } from '@vuelidate/validators';\nimport CustomInput from '../atoms/CustomInput.vue';\nimport CustomTexarea from '../atoms/CustomTexarea.vue';\nimport CustomButton from '../atoms/CustomButton.vue';\nexport default {\n  __name: 'CustomForm',\n  props: {\n    dataEdit: Object\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const props = __props;\n    const newProject = ref({\n      name: '',\n      description: '',\n      status: false\n    });\n    const rules = {\n      name: {\n        required: helpers.withMessage('El nombre es requerido', required)\n      },\n      description: {\n        required: helpers.withMessage('La descripción es requerida', required)\n      }\n    };\n    const v$ = useVuelidate(rules, newProject);\n    const validationForm = computed(() => {\n      v$.value.$touch();\n      return !v$.value.$invalid;\n    });\n    const addProject = () => {\n      if (validationForm.value) {\n        const project = {\n          ...newProject.value\n        };\n        submitProject(project);\n        resetForm();\n      }\n    };\n    const resetForm = () => {\n      newProject.value = {\n        name: '',\n        description: '',\n        status: false\n      };\n      v$.value.$reset();\n    };\n    const submitProject = project => {\n      try {\n        project.status = project.status ? {\n          label: 'Activo',\n          _id: '1'\n        } : {\n          label: 'Inactivo',\n          _id: '2'\n        };\n        if (!project._id) return store.dispatch('projects/addProject', project);\n        store.dispatch('projects/editProject', project);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    watch(() => props.dataEdit, propEdit => {\n      propEdit.status = propEdit.status._id === '1' ? true : false;\n      newProject.value = propEdit;\n    });\n    const __returned__ = {\n      store,\n      props,\n      newProject,\n      rules,\n      v$,\n      validationForm,\n      addProject,\n      resetForm,\n      submitProject,\n      computed,\n      ref,\n      watch,\n      get useStore() {\n        return useStore;\n      },\n      get useVuelidate() {\n        return useVuelidate;\n      },\n      get required() {\n        return required;\n      },\n      get helpers() {\n        return helpers;\n      },\n      CustomInput,\n      CustomTexarea,\n      CustomButton\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","ref","watch","useStore","useVuelidate","required","helpers","CustomInput","CustomTexarea","CustomButton","store","props","__props","newProject","name","description","status","rules","withMessage","v$","validationForm","value","$touch","$invalid","addProject","project","submitProject","resetForm","$reset","label","_id","dispatch","error","console","dataEdit","propEdit"],"sources":["C:/Users/RCG/Documents/GitHub/PruebaVue3.0/src/components/molecules/CustomForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"conten-form\">\r\n    <form @submit.prevent=\"addProject\" class=\"form\">\r\n      <div class=\"form-group\">\r\n        <CustomInput\r\n          label=\"Nombre del proyecto *\"\r\n          v-model=\"newProject.name\"\r\n          type=\"text\"\r\n        />\r\n        <div class=\"message-error\" v-if=\"v$.name.$error\"> {{ v$.name.required.$message }} </div>\r\n        <CustomTexarea\r\n          label=\"Descripcion del proyecto *\"\r\n          v-model=\"newProject.description\"\r\n        />\r\n        <div class=\"message-error\" v-if=\"v$.description.$error\">{{ v$.description.required.$message }}</div>\r\n        <CustomInput\r\n          label=\"Estado del proyecto (Activo/ inactivo)\"\r\n          v-model=\"newProject.status\"\r\n          type=\"checkbox\"\r\n        />\r\n      </div>\r\n      <CustomButton class=\"button\" label=\"Enviar\" type=\"submit\" />\r\n    </form>\r\n  </div>\r\n</template>\r\n<script setup>\r\nimport { computed, ref, watch, defineProps } from 'vue';\r\nimport { useStore } from 'vuex';\r\nimport { useVuelidate } from '@vuelidate/core';\r\nimport { required, helpers } from '@vuelidate/validators';\r\nimport CustomInput from '../atoms/CustomInput.vue';\r\nimport CustomTexarea from '../atoms/CustomTexarea.vue';\r\nimport CustomButton from '../atoms/CustomButton.vue';\r\n\r\nconst store = useStore();\r\n\r\nconst props = defineProps({\r\n    dataEdit: Object,\r\n});\r\n\r\nconst newProject = ref({\r\n  name: '',\r\n  description: '',\r\n  status: false\r\n});\r\n\r\nconst rules = {\r\n name: { required: helpers.withMessage('El nombre es requerido', required) },\r\n description: { required: helpers.withMessage('La descripción es requerida', required) }\r\n};\r\n\r\nconst v$ = useVuelidate(rules, newProject);\r\n\r\nconst validationForm = computed(() => {\r\n  v$.value.$touch();\r\n  return !v$.value.$invalid;\r\n})\r\n\r\nconst addProject = () => { \r\n  if (validationForm.value) {\r\n    const project = { ...newProject.value };\r\n    submitProject(project);\r\n    resetForm()\r\n  }\r\n};\r\n\r\nconst resetForm = () => {\r\n  newProject.value = { name: '', description: '', status: false };\r\n  v$.value.$reset();\r\n}\r\n\r\nconst submitProject = (project) => {\r\n  try {\r\n    project.status = project.status ? {label: 'Activo', _id: '1'} : {label: 'Inactivo', _id: '2'}\r\n    if (!project._id) return store.dispatch('projects/addProject', project);\r\n    store.dispatch('projects/editProject', project);\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nwatch(() => props.dataEdit, (propEdit) => {\r\n  propEdit.status = propEdit.status._id === '1' ? true : false\r\n  newProject.value = propEdit\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.form-group {\r\n  margin-bottom: 10px ;\r\n}\r\n.message-error {\r\n  color: red;\r\n}\r\n</style>"],"mappings":"AA0BA,SAASA,QAAQ,EAAEC,GAAG,EAAEC,KAAkB,QAAQ,KAAK;AACvD,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,QAAQ,EAAEC,OAAO,QAAQ,uBAAuB;AACzD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,YAAY,MAAM,2BAA2B;;;;;;;;;;IAEpD,MAAMC,KAAK,GAAGP,QAAQ,CAAC,CAAC;IAExB,MAAMQ,KAAK,GAAGC,OAEZ;IAEF,MAAMC,UAAU,GAAGZ,GAAG,CAAC;MACrBa,IAAI,EAAE,EAAE;MACRC,WAAW,EAAE,EAAE;MACfC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,KAAK,GAAG;MACbH,IAAI,EAAE;QAAET,QAAQ,EAAEC,OAAO,CAACY,WAAW,CAAC,wBAAwB,EAAEb,QAAQ;MAAE,CAAC;MAC3EU,WAAW,EAAE;QAAEV,QAAQ,EAAEC,OAAO,CAACY,WAAW,CAAC,6BAA6B,EAAEb,QAAQ;MAAE;IACvF,CAAC;IAED,MAAMc,EAAE,GAAGf,YAAY,CAACa,KAAK,EAAEJ,UAAU,CAAC;IAE1C,MAAMO,cAAc,GAAGpB,QAAQ,CAAC,MAAM;MACpCmB,EAAE,CAACE,KAAK,CAACC,MAAM,CAAC,CAAC;MACjB,OAAO,CAACH,EAAE,CAACE,KAAK,CAACE,QAAQ;IAC3B,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAGA,CAAA,KAAM;MACvB,IAAIJ,cAAc,CAACC,KAAK,EAAE;QACxB,MAAMI,OAAO,GAAG;UAAE,GAAGZ,UAAU,CAACQ;QAAM,CAAC;QACvCK,aAAa,CAACD,OAAO,CAAC;QACtBE,SAAS,CAAC,CAAC;MACb;IACF,CAAC;IAED,MAAMA,SAAS,GAAGA,CAAA,KAAM;MACtBd,UAAU,CAACQ,KAAK,GAAG;QAAEP,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAM,CAAC;MAC/DG,EAAE,CAACE,KAAK,CAACO,MAAM,CAAC,CAAC;IACnB,CAAC;IAED,MAAMF,aAAa,GAAID,OAAO,IAAK;MACjC,IAAI;QACFA,OAAO,CAACT,MAAM,GAAGS,OAAO,CAACT,MAAM,GAAG;UAACa,KAAK,EAAE,QAAQ;UAAEC,GAAG,EAAE;QAAG,CAAC,GAAG;UAACD,KAAK,EAAE,UAAU;UAAEC,GAAG,EAAE;QAAG,CAAC;QAC7F,IAAI,CAACL,OAAO,CAACK,GAAG,EAAE,OAAOpB,KAAK,CAACqB,QAAQ,CAAC,qBAAqB,EAAEN,OAAO,CAAC;QACvEf,KAAK,CAACqB,QAAQ,CAAC,sBAAsB,EAAEN,OAAO,CAAC;MACjD,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAED9B,KAAK,CAAC,MAAMS,KAAK,CAACuB,QAAQ,EAAGC,QAAQ,IAAK;MACxCA,QAAQ,CAACnB,MAAM,GAAGmB,QAAQ,CAACnB,MAAM,CAACc,GAAG,KAAK,GAAG,GAAG,IAAI,GAAG,KAAK;MAC5DjB,UAAU,CAACQ,KAAK,GAAGc,QAAQ;IAC7B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}